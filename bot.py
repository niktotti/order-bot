import os
import re
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
import gspread

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "iPhone17_Orders")
GOOGLE_JSON = os.getenv("GOOGLE_JSON", "google.json")

if not TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")

if MANAGER_CHAT_ID:
    try:
        MANAGER_CHAT_ID = int(MANAGER_CHAT_ID)
    except Exception:
        logging.warning("MANAGER_CHAT_ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        MANAGER_CHAT_ID = None

# Google Sheets
try:
    gc = gspread.service_account(filename=GOOGLE_JSON)
    sheet = gc.open(SPREADSHEET_NAME).sheet1
    print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except Exception as e:
    logging.warning("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: %s", e)
    sheet = None

# ------------------ –ö–æ–Ω—Ñ–∏–≥ —Å—Ü–µ–Ω ------------------
CHOOSING, MODEL, MEMORY, COLOR, CONFIRM, CONTACT = range(6)
MODELS = ["iPhone 17", "iPhone 17 Pro", "iPhone 17 Pro Max", "iPhone 17 Air"]

MEMORY_BY_MODEL = {
    "iPhone 17": ["256GB", "512GB"],
    "iPhone 17 Pro": ["256GB", "512GB", "1TB"],
    "iPhone 17 Pro Max": ["256GB", "512GB", "1TB", "2TB"],
    "iPhone 17 Air": ["256GB", "512GB", "1TB"],
}

COLOR_BY_MODEL = {
    "iPhone 17": ["Black", "White", "Sage", "Mist Blue", "Lavender"],
    "iPhone 17 Pro": ["Silver", "Cosmic Orange", "Deep Blue"],
    "iPhone 17 Pro Max": ["Silver", "Cosmic Orange", "Deep Blue"],
    "iPhone 17 Air": ["Sky Blue", "Light Gold", "Cloud White", "Space Black"],
}

COLOR_IMAGES = {
    "iPhone 17": "images/iphone17.png",
    "iPhone 17 Air": "images/iphone17_air.png",
    "iPhone 17 Pro": "images/iphone17_pro.png",
    "iPhone 17 Pro Max": "images/iphone17_pro_max.png",
}

logging.basicConfig(level=logging.INFO)

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
def build_model_kb():
    kb = [[InlineKeyboardButton(m, callback_data=f"model_{i}")] for i, m in enumerate(MODELS)]
    return InlineKeyboardMarkup(kb)

def build_multi_kb(options, selected_set, prefix="opt"):
    kb = []
    for opt in options:
        text = ("‚úÖ " if opt in selected_set else "") + opt
        cb = f"{prefix}_{opt}".replace(" ", "_")
        kb.append([InlineKeyboardButton(text, callback_data=cb)])
    kb.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}_done")])
    return InlineKeyboardMarkup(kb)

def post_order_menu():
    kb = [
        [InlineKeyboardButton("üì± –ù–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data="new_order")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
        [InlineKeyboardButton("üî• –ê–∫—Ü–∏–∏", callback_data="show_sales")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about_shop")]
    ]
    return InlineKeyboardMarkup(kb)

# ------------------ –•–µ–Ω–¥–ª–µ—Ä—ã ------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_order")]])
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω *TechStore*!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ –Ω–æ–≤—ã–π *iPhone 17* üì±.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üöÄ",
        reply_markup=kb,
        parse_mode="Markdown"
    )
    return CHOOSING

async def cb_start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:", reply_markup=build_model_kb())
    return MODEL

async def cb_choose_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[1])
    model = MODELS[idx]
    context.user_data["model"] = model
    context.user_data["memory"] = set()
    context.user_data["colors"] = set()
    context.user_data["memory_options"] = MEMORY_BY_MODEL[model]
    context.user_data["color_options"] = COLOR_BY_MODEL[model]

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{model}* ‚úÖ\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=build_multi_kb(context.user_data["memory_options"], context.user_data["memory"], prefix="mem"),
        parse_mode="Markdown"
    )
    return MEMORY

async def cb_memory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    memory_options = context.user_data["memory_options"]

    if data.endswith("_done"):
        model = context.user_data["model"]
        photo_path = COLOR_IMAGES.get(model)
        if photo_path and os.path.exists(photo_path):
            with open(photo_path, "rb") as photo:
                sent_photo = await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=f"üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è {model}:"
                )
            context.user_data["color_photo_id"] = sent_photo.message_id

        await query.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=build_multi_kb(context.user_data["color_options"], context.user_data["colors"], prefix="col")
        )
        return COLOR
    else:
        opt = data.split("_", 1)[1].replace("_", " ")
        sel = context.user_data.setdefault("memory", set())
        if opt in sel:
            sel.remove(opt)
        else:
            sel.add(opt)
        await query.edit_message_reply_markup(reply_markup=build_multi_kb(memory_options, sel, prefix="mem"))
        return MEMORY

async def cb_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    color_options = context.user_data["color_options"]

    if query.data.endswith("_done"):
        photo_id = context.user_data.pop("color_photo_id", None)
        if photo_id:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=photo_id)
            except Exception:
                pass

        model = context.user_data["model"]
        mem = ", ".join(sorted(context.user_data["memory"])) or "(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)"
        cols = ", ".join(sorted(context.user_data["colors"])) or "(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)"
        summary = f"–í–∞—à –≤—ã–±–æ—Ä:\nüì± {model}\nüíæ {mem}\nüé® {cols}"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="edit_order")]
        ])
        await query.edit_message_text(summary, reply_markup=kb)
        return CONFIRM
    else:
        opt = query.data.split("_", 1)[1].replace("_", " ")
        sel = context.user_data.setdefault("colors", set())
        if opt in sel:
            sel.remove(opt)
        else:
            sel.add(opt)
        await query.edit_message_reply_markup(reply_markup=build_multi_kb(color_options, sel, prefix="col"))
        return COLOR

# ------------------ –ö–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ------------------
PHONE_RE = re.compile(r"(\+?\d[\d\s\-()]{5,}\d)")

async def cb_confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û* –∏ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω +79001234567",
        parse_mode="Markdown"
    )
    return CONTACT

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    m = PHONE_RE.search(text)
    if not m:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –§–ò–û.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω +79001234567"
        )
        return CONTACT

    phone = m.group(1).strip()
    fio = text.replace(m.group(1), "").strip()
    user = update.message.from_user
    nick = f"@{user.username}" if user.username else f"{user.first_name or ''} {user.last_name or ''}".strip() or str(user.id)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    model = context.user_data["model"]
    memory = ", ".join(sorted(context.user_data["memory"]))
    colors = ", ".join(sorted(context.user_data["colors"]))

    if sheet:
        try:
            sheet.append_row([nick, phone, now, fio, model, memory, colors])
        except Exception as e:
            logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: %s", e)

    msg = (
        f"üì¶ *–ù–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–∫–∞–∑!*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {nick}\n"
        f"üìá –§–ò–û: {fio}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üì± –ú–æ–¥–µ–ª—å: {model}\n"
        f"üíæ –ü–∞–º—è—Ç—å: {memory}\n"
        f"üé® –¶–≤–µ—Ç: {colors}\n"
        f"üïí –î–∞—Ç–∞: {now}"
    )

    if MANAGER_CHAT_ID:
        try:
            await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=msg, parse_mode="Markdown")
        except Exception:
            pass

    await update.message.reply_text(
        "üöÄ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ üéâ\n–ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ üìû",
        reply_markup=post_order_menu(),
        parse_mode="Markdown"
    )
    context.user_data.clear()
    return ConversationHandler.END

# ------------------ –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ ------------------
async def cb_edit_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîÑ –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∑–∞–Ω–æ–≤–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=build_model_kb())
    return MODEL

async def cb_contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (900) 123-45-67\nTelegram: @manager\nEmail: support@techstore.com"
    await query.message.reply_text(text, reply_markup=post_order_menu())

async def cb_show_sales(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = "üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:\n- –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ\n- –†–∞—Å—Å—Ä–æ—á–∫–∞ 0% –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
    await query.message.reply_text(text, reply_markup=post_order_menu())

async def cb_about_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ TechStore:\n"
        "üè¨ –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 10, –ú–æ—Å–∫–≤–∞\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (900) 123-45-67\n"
        "üåê –°–æ—Ü.—Å–µ—Ç–∏: @techstore_vk, @techstore_telegram\n"
        "üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: 1 –≥–æ–¥ –Ω–∞ –≤—Å—é —Ç–µ—Ö–Ω–∏–∫—É\n"
        "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω‚Äì–ü—Ç 10:00‚Äì20:00, –°–±‚Äì–í—Å 11:00‚Äì18:00"
    )
    await query.message.reply_text(text, reply_markup=post_order_menu())

# ------------------ –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã ------------------
async def cmd_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω TechStore ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏, –≥–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥. –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 10, –ú–æ—Å–∫–≤–∞")

async def cmd_sales(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:\n- –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ\n- –†–∞—Å—Å—Ä–æ—á–∫–∞ 0% –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤")

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

# ------------------ –ó–∞–ø—É—Å–∫ ------------------
def main():
    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", cmd_start),
            CallbackQueryHandler(cb_start_order, pattern="^start_order$"),
            CallbackQueryHandler(cb_start_order, pattern="^new_order$"),
        ],
        states={
            CHOOSING: [CallbackQueryHandler(cb_start_order, pattern="^start_order$")],
            MODEL: [CallbackQueryHandler(cb_choose_model, pattern="^model_")],
            MEMORY: [CallbackQueryHandler(cb_memory, pattern="^mem_")],
            COLOR: [CallbackQueryHandler(cb_color, pattern="^col_")],
            CONFIRM: [
                CallbackQueryHandler(cb_confirm_order, pattern="^confirm_order$"),
                CallbackQueryHandler(cb_edit_order, pattern="^edit_order$")
            ],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_handler)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(cb_edit_order, pattern="^edit_order$"))
    app.add_handler(CallbackQueryHandler(cb_contact_manager, pattern="^contact_manager$"))
    app.add_handler(CallbackQueryHandler(cb_show_sales, pattern="^show_sales$"))
    app.add_handler(CallbackQueryHandler(cb_about_shop, pattern="^about_shop$"))
    app.add_handler(CommandHandler("info", cmd_info))
    app.add_handler(CommandHandler("sales", cmd_sales))
    app.add_handler(CommandHandler("cancel", cmd_cancel))

    print("ü§ñ Bot started ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()