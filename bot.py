import os
import re
import logging
from datetime import datetime
import tempfile
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Bot
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
import gspread

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ------------------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "iPhone17_Orders")

if not TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")

if MANAGER_CHAT_ID:
    try:
        MANAGER_CHAT_ID = int(MANAGER_CHAT_ID)
    except Exception:
        logging.warning("MANAGER_CHAT_ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        MANAGER_CHAT_ID = None

# ------------------ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ------------------
GOOGLE_JSON_CONTENT = os.getenv("GOOGLE_JSON_CONTENT")
if GOOGLE_JSON_CONTENT:
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".json")
    tmp.write(GOOGLE_JSON_CONTENT.encode())
    tmp.close()
    GOOGLE_JSON_PATH = tmp.name
else:
    GOOGLE_JSON_PATH = "google.json"

try:
    gc = gspread.service_account(filename=GOOGLE_JSON_PATH)
    sheet = gc.open(SPREADSHEET_NAME).sheet1
    print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
except Exception as e:
    logging.warning("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: %s", e)
    sheet = None

# ------------------ –°—Ü–µ–Ω—ã ------------------
CHOOSING, MODEL, MEMORY, COLOR, CONFIRM, CONTACT = range(6)
MODELS = ["iPhone 17", "iPhone 17 Pro", "iPhone 17 Pro Max", "iPhone 17 Air"]

MEMORY_BY_MODEL = {
    "iPhone 17": ["256GB", "512GB"],
    "iPhone 17 Pro": ["256GB", "512GB", "1TB"],
    "iPhone 17 Pro Max": ["256GB", "512GB", "1TB", "2TB"],
    "iPhone 17 Air": ["256GB", "512GB", "1TB"],
}

COLOR_BY_MODEL = {
    "iPhone 17": ["Black", "White", "Sage", "Mist Blue", "Lavender"],
    "iPhone 17 Pro": ["Silver", "Cosmic Orange", "Deep Blue"],
    "iPhone 17 Pro Max": ["Silver", "Cosmic Orange", "Deep Blue"],
    "iPhone 17 Air": ["Sky Blue", "Light Gold", "Cloud White", "Space Black"],
}

COLOR_IMAGES = {
    "iPhone 17": "images/iphone17.png",
    "iPhone 17 Air": "images/iphone17_air.png",
    "iPhone 17 Pro": "images/iphone17_pro.png",
    "iPhone 17 Pro Max": "images/iphone17_pro_max.png",
}

logging.basicConfig(level=logging.INFO)

# ------------------ Webhook cleanup ------------------
bot = Bot(TOKEN)
try:
    bot.delete_webhook()
    print("‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ webhooks, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å polling")
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
def build_model_kb():
    kb = [[InlineKeyboardButton(m, callback_data=f"model_{i}")] for i, m in enumerate(MODELS)]
    return InlineKeyboardMarkup(kb)

def build_multi_kb(options, selected_set, prefix="opt"):
    kb = []
    for opt in options:
        text = ("‚úÖ " if opt in selected_set else "") + opt
        cb = f"{prefix}_{opt}".replace(" ", "_")
        kb.append([InlineKeyboardButton(text, callback_data=cb)])
    kb.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}_done")])
    return InlineKeyboardMarkup(kb)

def post_order_menu():
    kb = [
        [InlineKeyboardButton("üì± –ù–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data="new_order")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
        [InlineKeyboardButton("üî• –ê–∫—Ü–∏–∏", callback_data="show_sales")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about_shop")]
    ]
    return InlineKeyboardMarkup(kb)

# ------------------ –•–µ–Ω–¥–ª–µ—Ä—ã ------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_order")]])
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω *TechStore*!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ –Ω–æ–≤—ã–π *iPhone 17* üì±.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üöÄ",
        reply_markup=kb,
        parse_mode="Markdown"
    )
    return CHOOSING

# --- –æ—Å—Ç–∞–ª—å–Ω—ã–µ cb_start_order, cb_choose_model, cb_memory, cb_color –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–≤–æ–µ–º—É –∫–æ–¥—É ---

# ------------------ –ö–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ------------------
PHONE_RE = re.compile(r"(?:\+7|8)?(\d{10})")

async def cb_confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û* –∏ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω +79001234567",
        parse_mode="Markdown"
    )
    return CONTACT

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    
    digits_only = re.sub(r"\D", "", text)
    m = PHONE_RE.search(digits_only)
    if not m:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –§–ò–û.\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "+7XXXXXXXXXX\n8XXXXXXXXXX\nXXXXXXXXXX (10 —Ü–∏—Ñ—Ä)\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω +79001234567"
        )
        return CONTACT

    digits = m.group(1)
    phone = "+7" + digits[-10:]  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ +7XXXXXXXXXX

    fio = re.sub(r"\+?\d[\d\s\-()]+", "", text).strip()
    user = update.message.from_user
    nick = f"@{user.username}" if user.username else f"{user.first_name or ''} {user.last_name or ''}".strip() or str(user.id)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    model = context.user_data["model"]
    memory = ", ".join(sorted(context.user_data["memory"]))
    colors = ", ".join(sorted(context.user_data["colors"]))

    if sheet:
        try:
            sheet.append_row([nick, phone, now, fio, model, memory, colors])
        except Exception as e:
            logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: %s", e)

    from telegram.helpers import escape_markdown
    msg = (
        f"üì¶ *–ù–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–∫–∞–∑!*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {nick}\n"
        f"üìá –§–ò–û: {fio}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üì± –ú–æ–¥–µ–ª—å: {model}\n"
        f"üíæ –ü–∞–º—è—Ç—å: {memory}\n"
        f"üé® –¶–≤–µ—Ç: {colors}\n"
        f"üïí –î–∞—Ç–∞: {now}"
    )
    msg_safe = escape_markdown(msg, version=2)

    if MANAGER_CHAT_ID:
        try:
            await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=msg_safe, parse_mode="MarkdownV2")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

    await update.message.reply_text(
        "üöÄ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ üéâ\n–ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ üìû",
        reply_markup=post_order_menu(),
        parse_mode="Markdown"
    )
    context.user_data.clear()
    return ConversationHandler.END

# ------------------ –ó–∞–ø—É—Å–∫ ------------------
def main():
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ—à—å –≤—Å–µ —Å–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ ConversationHandler –∑–¥–µ—Å—å, –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ
    # ...

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî polling –∞–∫—Ç–∏–≤–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()